// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import djoemo "github.com/adjoeio/djoemo"
import mock "github.com/stretchr/testify/mock"

// DjoemoeRepository is an autogenerated mock type for the DjoemoeRepository type
type DjoemoeRepository struct {
	mock.Mock
}

// DeleteItemWithContext provides a mock function with given fields: ctx, key
func (_m *DjoemoeRepository) DeleteItemWithContext(ctx context.Context, key djoemo.KeyInterface) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, djoemo.KeyInterface) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GIndex provides a mock function with given fields: name
func (_m *DjoemoeRepository) GIndex(name string) djoemo.GlobalIndexInterface {
	ret := _m.Called(name)

	var r0 djoemo.GlobalIndexInterface
	if rf, ok := ret.Get(0).(func(string) djoemo.GlobalIndexInterface); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(djoemo.GlobalIndexInterface)
		}
	}

	return r0
}

// GetItem provides a mock function with given fields: key, item
func (_m *DjoemoeRepository) GetItem(key djoemo.KeyInterface, item interface{}) (bool, error) {
	ret := _m.Called(key, item)

	var r0 bool
	if rf, ok := ret.Get(0).(func(djoemo.KeyInterface, interface{}) bool); ok {
		r0 = rf(key, item)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(djoemo.KeyInterface, interface{}) error); ok {
		r1 = rf(key, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemWithContext provides a mock function with given fields: ctx, key, out
func (_m *DjoemoeRepository) GetItemWithContext(ctx context.Context, key djoemo.KeyInterface, out interface{}) (bool, error) {
	ret := _m.Called(ctx, key, out)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, djoemo.KeyInterface, interface{}) bool); ok {
		r0 = rf(ctx, key, out)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, djoemo.KeyInterface, interface{}) error); ok {
		r1 = rf(ctx, key, out)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItems provides a mock function with given fields: key, items
func (_m *DjoemoeRepository) GetItems(key djoemo.KeyInterface, items interface{}) (bool, error) {
	ret := _m.Called(key, items)

	var r0 bool
	if rf, ok := ret.Get(0).(func(djoemo.KeyInterface, interface{}) bool); ok {
		r0 = rf(key, items)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(djoemo.KeyInterface, interface{}) error); ok {
		r1 = rf(key, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemsWithContext provides a mock function with given fields: ctx, key, out
func (_m *DjoemoeRepository) GetItemsWithContext(ctx context.Context, key djoemo.KeyInterface, out interface{}) (bool, error) {
	ret := _m.Called(ctx, key, out)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, djoemo.KeyInterface, interface{}) bool); ok {
		r0 = rf(ctx, key, out)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, djoemo.KeyInterface, interface{}) error); ok {
		r1 = rf(ctx, key, out)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: query, item
func (_m *DjoemoeRepository) Query(query djoemo.QueryInterface, item interface{}) error {
	ret := _m.Called(query, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(djoemo.QueryInterface, interface{}) error); ok {
		r0 = rf(query, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryWithContext provides a mock function with given fields: ctx, query, out
func (_m *DjoemoeRepository) QueryWithContext(ctx context.Context, query djoemo.QueryInterface, out interface{}) error {
	ret := _m.Called(ctx, query, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, djoemo.QueryInterface, interface{}) error); ok {
		r0 = rf(ctx, query, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveItemWithContext provides a mock function with given fields: ctx, key, item
func (_m *DjoemoeRepository) SaveItemWithContext(ctx context.Context, key djoemo.KeyInterface, item interface{}) error {
	ret := _m.Called(ctx, key, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, djoemo.KeyInterface, interface{}) error); ok {
		r0 = rf(ctx, key, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWithContext provides a mock function with given fields: ctx, expression, key, values
func (_m *DjoemoeRepository) UpdateWithContext(ctx context.Context, expression djoemo.UpdateExpression, key djoemo.KeyInterface, values map[string]interface{}) error {
	ret := _m.Called(ctx, expression, key, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, djoemo.UpdateExpression, djoemo.KeyInterface, map[string]interface{}) error); ok {
		r0 = rf(ctx, expression, key, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
